plotNovosCasosObito <- plot_ly(data = novosCasosObito_data, x = ~date, y = ~novosCasos,
marker = list(color = 'rgba(255,0,0,1)'), type='bar')
plotNovosCasosObito <- plotNovosCasosObito %>% layout(title = 'Novos obitos por Covid no Brasil (por dia)', xaxis = x_axis, yaxis=y_axis)
######### choropleth map Brasil vs casos covid ############
library(dplyr)
df.state.last <- brazil_covid19 %>%
filter(date == '2020-05-26') %>%
select(state,cases)
df.state.last <- inner_join(df.state.last, states, by = c('state' = 'V2'))
df.state.last <- rename(df.state.last, codigo_uf=V1)
df.state.last <- rename(df.state.last, uf=V3)
library(rgdal)
shp <- readOGR("Mapa\\.", stringsAsFactors=FALSE, encoding="UTF-8")
class(shp)
##Agora, fazer a junção do dataframe com o shapefile
df <- merge(shp, df.state.last, by.x = 'CD_UF', by.y= 'codigo_uf')
proj4string(df) <- CRS('+proj=longlat +datum=WGS84 +no_defs')
Encoding(df$NM_UF) <- 'UTF-8'
library(RColorBrewer)
library(leaflet)
pal <- colorBin("YlOrRd",domain = df$cases) #cores do mapa
state_popup <- paste0("<strong>Estado: </strong>",
df$NM_UF,
"<br><strong>Casos confirmados: </strong>",
df$cases)
mapa <- leaflet(data = df) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(fillColor = ~pal(df$cases),
fillOpacity = 0.8,
weight = 1,
color = "#BDBDC3",
popup = state_popup)
mapa <- mapa %>%   addLegend("bottomright", pal = pal, values = df$cases,
title = "Casos confirmados Corona Virus",
opacity = 1)
brazil_cities_coordinates <- read.csv('brazil_cities_coordinates.csv', header = T, encoding="UTF-8")
brazil_covid19 <- read.csv('brazil_covid19.csv', header = T, encoding="UTF-8")
brazil_covid19_cities <- read.csv('brazil_covid19_cities.csv', header = T, encoding="UTF-8")
brazil_covid19_macro <- read.csv('brazil_covid19_macro.csv', header = T, encoding="UTF-8")
brazil_population_2019 <- read.csv('brazil_population_2019.csv', header = T, encoding="UTF-8")
states <- read.csv('estados.csv', header = F, encoding="UTF-8")
library(dplyr)
df.state.last <- brazil_covid19 %>%
filter(date == '2020-05-26') %>%
select(state,deaths,cases)
formate_number <- function(numero){
numero <- format(round(numero, 4), nsmall = 4)
return(numero)
}
death_rate <- function(mortes,confirmados){
return(mortes/confirmados)
}
df.state.last$death_rate = death_rate(df.state.last$deaths, df.state.last$cases)*100
df.state.last$cases_rate = sapply(df.state.last$cases, function(x){x <- (x*100)/sum(df.state.last$cases)})
barPlot_data <- df.state.last[,c('state', 'death_rate', 'cases_rate')]
barPlot_data$death_rate = as.numeric(formate_number(barPlot_data$death_rate))
barPlot_data$cases_rate = as.numeric(formate_number(barPlot_data$cases_rate))
states$V1 <- NULL
barPlot_data <- inner_join(barPlot_data, states, by = c('state' = 'V2'))
barPlot_data$state <- NULL
barPlot_data <- rename(barPlot_data, state=V3)
library(plotly)
barPlot1 <- barPlot_data %>% plot_ly()
barPlot1 <- barPlot1 %>% add_trace(x = ~state, y = ~cases_rate, type = 'bar',
name = '% de confirmados do estado em relação ao País',
marker = list(color = 'rgba(247,202,24,1)',
line = list(color = 'rgb(8,48,107)', width = 1.5)))
barPlot1 <- barPlot1 %>% add_trace(x = ~state, y = ~death_rate, type = 'bar',
name = 'Letalidade',
marker = list(color = 'rgba(242,38,19,1)',
line = list(color = 'rgb(8,48,107)', width = 1.5)))
barPlot1 <- barPlot1 %>% layout(title = "Corona Vírus nos estados do Brasil",
barmode = 'group',
xaxis = list(title = ""),
yaxis = list(title = "%"),
legend = list(orientation = 'h',
xanchor = 'center',
x = 0.5))
df.region.last <- brazil_covid19 %>%
filter(date == '2020-05-26') %>%
group_by(region) %>%
summarize(deaths = sum(deaths), cases = sum(cases))
df.region.last$death_rate = death_rate(df.region.last$deaths, df.region.last$cases)*100
df.region.last$cases_rate = sapply(df.region.last$cases, function(x){x <- (x*100)/sum(df.region.last$cases)})
barPlotRegion_data <- df.region.last[,c('region', 'death_rate', 'cases_rate')]
barPlotRegion_data$death_rate = as.numeric(formate_number(barPlotRegion_data$death_rate))
barPlotRegion_data$cases_rate = as.numeric(formate_number(barPlotRegion_data$cases_rate))
barPlot2 <- barPlotRegion_data %>% plot_ly()
barPlot2 <- barPlot2 %>% add_trace(x = ~region, y = ~cases_rate, type = 'bar',
name = '% de confirmados da região em relação ao País',
marker = list(color = 'rgba(247,202,24,1)',
line = list(color = 'rgb(8,48,107)', width = 1.5)))
barPlot2 <- barPlot2 %>% add_trace(x = ~region, y = ~death_rate, type = 'bar',
name = 'Letalidade',
marker = list(color = 'rgba(242,38,19,1)',
line = list(color = 'rgb(8,48,107)', width = 1.5)))
barPlot2 <- barPlot2 %>% layout(title = "Corona Vírus nas regiões do Brasil",
barmode = 'group',
xaxis = list(title = ""),
yaxis = list(title = "%"),
legend = list(orientation = 'h',
xanchor = 'center',
x = 0.5))
brazil_covid19_macro$date <- as.Date(brazil_covid19_macro$date, format = '%Y-%m-%d')
scatterPlotConfirmados_data<-brazil_covid19_macro[,c('date', 'cases')]
x_axis <- list(title = 'Data', tickformat = '%d/%m')
y_axis <- list(title = 'Número de casos confirmados')
plotConfirmados <- plot_ly(data = scatterPlotConfirmados_data, x = ~date, y = ~cases,
marker = list(color = 'rgba(44,130,201,1)'), type='scatter')
plotConfirmados <- plotConfirmados %>% layout(title = 'Casos confirmados de Covid no Brasil', xaxis = x_axis, yaxis=y_axis)
scatterPlotObitos_data<-brazil_covid19_macro[,c('date', 'deaths')]
x_axis <- list(title = 'Data', tickformat = '%d/%m')
y_axis <- list(title = 'Número de óbitos')
plotObitos <- plot_ly(data = scatterPlotObitos_data, x = ~date, y = ~deaths,
marker = list(color = 'rgba(255,0,0,1)'), type='scatter')
plotObitos <- plotObitos %>% layout(title = 'Número de óbitos por Covid no Brasil', xaxis = x_axis, yaxis=y_axis)
novosCasos_data <- brazil_covid19_macro[,c('date', 'cases')]
novosCasos_data <- distinct(novosCasos_data)
novosCasosDia <- function(vetor){
resultado <- vetor[1]
for(i in 2:length(vetor)){
resultado[i] = vetor[i] - vetor[i-1]
}
return(resultado)
}
novosCasos_data$novosCasos <- novosCasosDia(novosCasos_data$cases)
x_axis <- list(title = 'Data', tickformat = '%d/%m')
y_axis <- list(title = 'Número de novos casos por dia')
plotNovosCasos <- plot_ly(data = novosCasos_data, x = ~date, y = ~novosCasos,
marker = list(color = 'rgba(44,130,201,1)'), type='bar')
plotNovosCasos <- plotNovosCasos %>% layout(title = 'Novos casos confirmados de Covid no Brasil (por dia)', xaxis = x_axis, yaxis=y_axis)
novosCasosObito_data <- brazil_covid19_macro[,c('date', 'deaths')]
novosCasosObito_data <- novosCasosObito_data[-c(73,89),]
novosCasosObito_data$novosCasos <- novosCasosDia(novosCasosObito_data$deaths)
x_axis <- list(title = 'Data', tickformat = '%d/%m')
y_axis <- list(title = 'Número de novos obitos por dia')
plotNovosCasosObito <- plot_ly(data = novosCasosObito_data, x = ~date, y = ~novosCasos,
marker = list(color = 'rgba(255,0,0,1)'), type='bar')
plotNovosCasosObito <- plotNovosCasosObito %>% layout(title = 'Novos obitos por Covid no Brasil (por dia)', xaxis = x_axis, yaxis=y_axis)
df.state.last <- brazil_covid19 %>%
filter(date == '2020-05-26') %>%
select(state,cases)
df.state.last <- inner_join(df.state.last, states, by = c('state' = 'V2'))
df.state.last <- rename(df.state.last, codigo_uf=V1)
df.state.last <- rename(df.state.last, uf=V3)
View(df.state.last)
brazil_cities_coordinates <- read.csv('brazil_cities_coordinates.csv', header = T, encoding="UTF-8")
brazil_covid19 <- read.csv('brazil_covid19.csv', header = T, encoding="UTF-8")
brazil_covid19_cities <- read.csv('brazil_covid19_cities.csv', header = T, encoding="UTF-8")
brazil_covid19_macro <- read.csv('brazil_covid19_macro.csv', header = T, encoding="UTF-8")
brazil_population_2019 <- read.csv('brazil_population_2019.csv', header = T, encoding="UTF-8")
states <- read.csv('estados.csv', header = F, encoding="UTF-8")
library(dplyr)
df.state.last <- brazil_covid19 %>%
filter(date == '2020-05-26') %>%
select(state,deaths,cases)
formate_number <- function(numero){
numero <- format(round(numero, 4), nsmall = 4)
return(numero)
}
death_rate <- function(mortes,confirmados){
return(mortes/confirmados)
}
df.state.last$death_rate = death_rate(df.state.last$deaths, df.state.last$cases)*100
df.state.last$cases_rate = sapply(df.state.last$cases, function(x){x <- (x*100)/sum(df.state.last$cases)})
barPlot_data <- df.state.last[,c('state', 'death_rate', 'cases_rate')]
barPlot_data$death_rate = as.numeric(formate_number(barPlot_data$death_rate))
barPlot_data$cases_rate = as.numeric(formate_number(barPlot_data$cases_rate))
states$V1 <- NULL
barPlot_data <- inner_join(barPlot_data, states, by = c('state' = 'V2'))
barPlot_data$state <- NULL
barPlot_data <- rename(barPlot_data, state=V3)
library(plotly)
barPlot1 <- barPlot_data %>% plot_ly()
barPlot1 <- barPlot1 %>% add_trace(x = ~state, y = ~cases_rate, type = 'bar',
name = '% de confirmados do estado em relação ao País',
marker = list(color = 'rgba(247,202,24,1)',
line = list(color = 'rgb(8,48,107)', width = 1.5)))
barPlot1 <- barPlot1 %>% add_trace(x = ~state, y = ~death_rate, type = 'bar',
name = 'Letalidade',
marker = list(color = 'rgba(242,38,19,1)',
line = list(color = 'rgb(8,48,107)', width = 1.5)))
barPlot1 <- barPlot1 %>% layout(title = "Corona Vírus nos estados do Brasil",
barmode = 'group',
xaxis = list(title = ""),
yaxis = list(title = "%"),
legend = list(orientation = 'h',
xanchor = 'center',
x = 0.5))
##########Por Região##########
df.region.last <- brazil_covid19 %>%
filter(date == '2020-05-26') %>%
group_by(region) %>%
summarize(deaths = sum(deaths), cases = sum(cases))
df.region.last$death_rate = death_rate(df.region.last$deaths, df.region.last$cases)*100
df.region.last$cases_rate = sapply(df.region.last$cases, function(x){x <- (x*100)/sum(df.region.last$cases)})
barPlotRegion_data <- df.region.last[,c('region', 'death_rate', 'cases_rate')]
barPlotRegion_data$death_rate = as.numeric(formate_number(barPlotRegion_data$death_rate))
barPlotRegion_data$cases_rate = as.numeric(formate_number(barPlotRegion_data$cases_rate))
barPlot2 <- barPlotRegion_data %>% plot_ly()
barPlot2 <- barPlot2 %>% add_trace(x = ~region, y = ~cases_rate, type = 'bar',
name = '% de confirmados da região em relação ao País',
marker = list(color = 'rgba(247,202,24,1)',
line = list(color = 'rgb(8,48,107)', width = 1.5)))
barPlot2 <- barPlot2 %>% add_trace(x = ~region, y = ~death_rate, type = 'bar',
name = 'Letalidade',
marker = list(color = 'rgba(242,38,19,1)',
line = list(color = 'rgb(8,48,107)', width = 1.5)))
barPlot2 <- barPlot2 %>% layout(title = "Corona Vírus nas regiões do Brasil",
barmode = 'group',
xaxis = list(title = ""),
yaxis = list(title = "%"),
legend = list(orientation = 'h',
xanchor = 'center',
x = 0.5))
################ Casos e mortes acumuladas no Brasil ###############
brazil_covid19_macro$date <- as.Date(brazil_covid19_macro$date, format = '%Y-%m-%d')
#Casos acumulados
scatterPlotConfirmados_data<-brazil_covid19_macro[,c('date', 'cases')]
x_axis <- list(title = 'Data', tickformat = '%d/%m')
y_axis <- list(title = 'Número de casos confirmados')
plotConfirmados <- plot_ly(data = scatterPlotConfirmados_data, x = ~date, y = ~cases,
marker = list(color = 'rgba(44,130,201,1)'), type='scatter')
plotConfirmados <- plotConfirmados %>% layout(title = 'Casos confirmados de Covid no Brasil', xaxis = x_axis, yaxis=y_axis)
#Mortes acumuladas
scatterPlotObitos_data<-brazil_covid19_macro[,c('date', 'deaths')]
x_axis <- list(title = 'Data', tickformat = '%d/%m')
y_axis <- list(title = 'Número de óbitos')
plotObitos <- plot_ly(data = scatterPlotObitos_data, x = ~date, y = ~deaths,
marker = list(color = 'rgba(255,0,0,1)'), type='scatter')
plotObitos <- plotObitos %>% layout(title = 'Número de óbitos por Covid no Brasil', xaxis = x_axis, yaxis=y_axis)
#Novos casos confirmados por dia
novosCasos_data <- brazil_covid19_macro[,c('date', 'cases')]
novosCasos_data <- distinct(novosCasos_data)
novosCasosDia <- function(vetor){
resultado <- vetor[1]
for(i in 2:length(vetor)){
resultado[i] = vetor[i] - vetor[i-1]
}
return(resultado)
}
novosCasos_data$novosCasos <- novosCasosDia(novosCasos_data$cases)
x_axis <- list(title = 'Data', tickformat = '%d/%m')
y_axis <- list(title = 'Número de novos casos por dia')
plotNovosCasos <- plot_ly(data = novosCasos_data, x = ~date, y = ~novosCasos,
marker = list(color = 'rgba(44,130,201,1)'), type='bar')
plotNovosCasos <- plotNovosCasos %>% layout(title = 'Novos casos confirmados de Covid no Brasil (por dia)', xaxis = x_axis, yaxis=y_axis)
#Novos obitos por dia
#Como existem datas iguais com valores diferentes para o numero de mortes, apagaresmo manualmente
#os registros de mesma data com menos obitos.
novosCasosObito_data <- brazil_covid19_macro[,c('date', 'deaths')]
novosCasosObito_data <- novosCasosObito_data[-c(73,89),]
novosCasosObito_data$novosCasos <- novosCasosDia(novosCasosObito_data$deaths)
x_axis <- list(title = 'Data', tickformat = '%d/%m')
y_axis <- list(title = 'Número de novos obitos por dia')
plotNovosCasosObito <- plot_ly(data = novosCasosObito_data, x = ~date, y = ~novosCasos,
marker = list(color = 'rgba(255,0,0,1)'), type='bar')
plotNovosCasosObito <- plotNovosCasosObito %>% layout(title = 'Novos obitos por Covid no Brasil (por dia)', xaxis = x_axis, yaxis=y_axis)
######### choropleth map Brasil vs casos covid ############
library(dplyr)
df.state.last <- brazil_covid19 %>%
filter(date == '2020-05-26') %>%
select(state,cases)
states <- read.csv('estados.csv', header = F, encoding="UTF-8")
df.state.last <- inner_join(df.state.last, states, by = c('state' = 'V2'))
df.state.last <- rename(df.state.last, codigo_uf=V1)
df.state.last <- rename(df.state.last, uf=V3)
View(df.state.last)
library(rgdal)
shp <- readOGR("Mapa\\.", stringsAsFactors=FALSE, encoding="UTF-8")
class(shp)
##Agora, fazer a junção do dataframe com o shapefile
df <- merge(shp, df.state.last, by.x = 'CD_UF', by.y= 'codigo_uf')
proj4string(df) <- CRS('+proj=longlat +datum=WGS84 +no_defs')
Encoding(df$NM_UF) <- 'UTF-8'
library(RColorBrewer)
library(leaflet)
pal <- colorBin("YlOrRd",domain = df$cases) #cores do mapa
state_popup <- paste0("<strong>Estado: </strong>",
df$NM_UF,
"<br><strong>Casos confirmados: </strong>",
df$cases)
mapa <- leaflet(data = df) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(fillColor = ~pal(df$cases),
fillOpacity = 0.8,
weight = 1,
color = "#BDBDC3",
popup = state_popup)
mapa <- mapa %>%   addLegend("bottomright", pal = pal, values = df$cases,
title = "Casos confirmados Corona Virus",
opacity = 1)
library(shiny)
library(shinydashboard)
library(plotly)
library(leaflet)
source('covid_new.R')
dashboard <- dashboardPage(
dashboardHeader(title = 'Covid no Brasil'),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(box(leafletOutput('mapa'), width = '100%'),
),
fluidRow(box(plotlyOutput('plot1'), status = 'primary'),
box(plotlyOutput('plot2'), status = 'danger'),
),
fluidRow(
box(plotlyOutput('plot3'), status = 'primary'),
box(plotlyOutput('plot4'), status = 'danger'),
),
fluidRow(
tabBox(
title = 'Titulo',
id = 'tabset1',
width = '100%',
tabPanel('Estados', barPlot1),
tabPanel('Região', barPlot2)
)
)
)
)
source('ui.R')
library(shiny)
library(shinydashboard)
library(plotly)
library(leaflet)
server <- function(input, output){
output$mapa  <- renderLeaflet({
mapa
})
output$plot1  <- renderPlotly({
plotConfirmados
})
output$plot2  <- renderPlotly({
plotObitos
})
output$plot3  <- renderPlotly({
plotNovosCasos
})
output$plot4  <- renderPlotly({
plotNovosCasosObito
})
output$tabset1Selected  <-  renderPlotly({
input$tabset1
})
}
shinyApp(dashboard, server)
library(shiny)
library(shinydashboard)
library(plotly)
library(leaflet)
source('covid_new.R')
dashboard <- dashboardPage(
dashboardHeader(title = 'Covid no Brasil'),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(box(leafletOutput('mapa'), width = '100%'),
),
fluidRow(box(plotlyOutput('plot1'), status = 'primary'),
box(plotlyOutput('plot2'), status = 'danger'),
),
fluidRow(
box(plotlyOutput('plot3'), status = 'primary'),
box(plotlyOutput('plot4'), status = 'danger'),
),
fluidRow(
tabBox(
title = 'Titulo',
id = 'tabset1',
width = '100%',
tabPanel('Estados', barPlot1),
tabPanel('Região', barPlot2)
)
)
)
)
source('ui.R')
server <- function(input, output){
output$mapa  <- renderLeaflet({
mapa
})
output$plot1  <- renderPlotly({
plotConfirmados
})
output$plot2  <- renderPlotly({
plotObitos
})
output$plot3  <- renderPlotly({
plotNovosCasos
})
output$plot4  <- renderPlotly({
plotNovosCasosObito
})
output$tabset1Selected  <-  renderPlotly({
input$tabset1
})
}
shinyApp(dashboard, server)
source('ui.R')
server <- function(input, output){
output$mapa  <- renderLeaflet({
mapa
})
output$plot1  <- renderPlotly({
plotConfirmados
})
output$plot2  <- renderPlotly({
plotObitos
})
output$plot3  <- renderPlotly({
plotNovosCasos
})
output$plot4  <- renderPlotly({
plotNovosCasosObito
})
output$tabset1Selected  <-  renderPlotly({
input$tabset1
})
}
shinyApp(dashboard, server)
View(plotNovosCasos)
plotNovosCasos
source('covid_new.R', encoding = 'utf-8')
plotNovosCasos
source('ui.R', encoding = 'utf-8')
server <- function(input, output){
output$mapa  <- renderLeaflet({
mapa
})
output$plot1  <- renderPlotly({
plotConfirmados
})
output$plot2  <- renderPlotly({
plotObitos
})
output$plot3  <- renderPlotly({
plotNovosCasos
})
output$plot4  <- renderPlotly({
plotNovosCasosObito
})
output$tabset1Selected  <-  renderPlotly({
input$tabset1
})
}
shinyApp(dashboard, server)
runApp()
source('ui.R', encoding = 'utf-8')
server <- function(input, output){
output$mapa  <- renderLeaflet({
mapa
})
output$plot1  <- renderPlotly({
plotConfirmados
})
output$plot2  <- renderPlotly({
plotObitos
})
output$plot3  <- renderPlotly({
plotNovosCasos
})
output$plot4  <- renderPlotly({
plotNovosCasosObito
})
output$tabset1Selected  <-  renderPlotly({
input$tabset1
})
}
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
source('ui.R', encoding = 'utf-8')
server <- function(input, output){
output$mapa  <- renderLeaflet({
mapa
})
output$plot1  <- renderPlotly({
plotConfirmados
})
output$plot2  <- renderPlotly({
plotObitos
})
output$plot3  <- renderPlotly({
plotNovosCasos
})
output$plot4  <- renderPlotly({
plotNovosCasosObito
})
output$tabset1Selected  <-  renderPlotly({
input$tabset1
})
}
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
